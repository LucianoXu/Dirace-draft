@inproceedings{DBLP:conf/lics/AbramskyC04,
  author       = {Samson Abramsky and
                  Bob Coecke},
  title        = {A Categorical Semantics of Quantum Protocols},
  booktitle    = {19th {IEEE} Symposium on Logic in Computer Science {(LICS} 2004),
                  14-17 July 2004, Turku, Finland, Proceedings},
  pages        = {415--425},
  publisher    = {{IEEE} Computer Society},
  year         = {2004},
  url          = {https://doi.org/10.1109/LICS.2004.1319636},
  doi          = {10.1109/LICS.2004.1319636},
  timestamp    = {Fri, 24 Mar 2023 00:01:49 +0100},
  biburl       = {https://dblp.org/rec/conf/lics/AbramskyC04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{jeandel2018complete,
author = {Jeandel, Emmanuel and Perdrix, Simon and Vilmart, Renaud}, title = {A Complete Axiomatisation of the ZX-Calculus for Clifford+T Quantum Mechanics}, year = {2018}, isbn = {9781450355834}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/3209108.3209131}, doi = {10.1145/3209108.3209131}, abstract = {We introduce the first complete and approximately universal diagrammatic language for quantum mechanics. We make the ZX-Calculus, a diagrammatic language introduced by Coecke and Duncan, complete for the so-called Clifford+T quantum mechanics by adding two new axioms to the language. The completeness of the ZX-Calculus for Clifford+T quantum mechanics -- also called the π/4-fragment of the ZX-Calculus -- was one of the main open questions in categorical quantum mechanics. We prove the completeness of this fragment using the recently studied ZW-Calculus, a calculus dealing with integer matrices. We also prove that the π/4-fragment of the ZX-Calculus represents exactly all the matrices over some finite dimensional extension of the ring of dyadic rationals.}, booktitle = {Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science}, pages = {559–568}, numpages = {10}, keywords = {ZX-Calculus, Completeness, Clifford+T, Categorical Quantum Mechanics}, location = {Oxford, United Kingdom}, series = {LICS '18} }


@inproceedings{DBLP:conf/icalp/CoeckeD08,
  author       = {Bob Coecke and
                  Ross Duncan},
  editor       = {Luca Aceto and
                  Ivan Damg{\aa}rd and
                  Leslie Ann Goldberg and
                  Magn{\'{u}}s M. Halld{\'{o}}rsson and
                  Anna Ing{\'{o}}lfsd{\'{o}}ttir and
                  Igor Walukiewicz},
  title        = {Interacting Quantum Observables},
  booktitle    = {Automata, Languages and Programming, 35th International Colloquium,
                  {ICALP} 2008, Reykjavik, Iceland, July 7-11, 2008, Proceedings, Part
                  {II} - Track {B:} Logic, Semantics, and Theory of Programming {\&}
                  Track {C:} Security and Cryptography Foundations},
  series       = {Lecture Notes in Computer Science},
  volume       = {5126},
  pages        = {298--310},
  publisher    = {Springer},
  year         = {2008},
  url          = {https://doi.org/10.1007/978-3-540-70583-3\_25},
  doi          = {10.1007/978-3-540-70583-3\_25},
  timestamp    = {Fri, 27 Mar 2020 09:02:59 +0100},
  biburl       = {https://dblp.org/rec/conf/icalp/CoeckeD08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{Zhou2023,
author = {Zhou, Li and Barthe, Gilles and Strub, Pierre-Yves and Liu, Junyi and Ying, Mingsheng},
title = {Coq{Q}: Foundational Verification of Quantum Programs},
year = {2023},
issue_date = {January 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {POPL},
url = {https://doi.org/10.1145/3571222},
doi = {10.1145/3571222},
abstract = {CoqQ is a framework for reasoning about quantum programs in the Coq proof assistant. Its main components are: a deeply embedded quantum programming language, in which classic quantum algorithms are easily expressed, and an expressive program logic for proving properties of programs. CoqQ is foundational: the program logic is formally proved sound with respect to a denotational semantics based on state-of-art mathematical libraries (MathComp and MathComp Analysis). CoqQ is also practical: assertions can use Dirac expressions, which eases concise specifications, and proofs can exploit local and parallel reasoning, which minimizes verification effort. We illustrate the applicability of CoqQ with many examples from the literature.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {29},
numpages = {33},
keywords = {Mathematical Libraries, Program Logics, Proof Assistants, Quantum Programs}
}

@article{DBLP:journals/cacm/BarbosaBCDKLNNOPRTZ23,
  author       = {Haniel Barbosa and
                  Clark W. Barrett and
                  Byron Cook and
                  Bruno Dutertre and
                  Gereon Kremer and
                  Hanna Lachnitt and
                  Aina Niemetz and
                  Andres N{\"{o}}tzli and
                  Alex Ozdemir and
                  Mathias Preiner and
                  Andrew Reynolds and
                  Cesare Tinelli and
                  Yoni Zohar},
  title        = {Generating and Exploiting Automated Reasoning Proof Certificates},
  journal      = {Commun. {ACM}},
  volume       = {66},
  number       = {10},
  pages        = {86--95},
  year         = {2023},
  url          = {https://doi.org/10.1145/3587692},
  doi          = {10.1145/3587692},
  timestamp    = {Sun, 19 Jan 2025 14:03:30 +0100},
  biburl       = {https://dblp.org/rec/journals/cacm/BarbosaBCDKLNNOPRTZ23.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{amy2023complete,
   title={Complete Equational Theories for the Sum-Over-Paths with Unbalanced Amplitudes},
   volume={384},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.384.8},
   DOI={10.4204/eptcs.384.8},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Amy, Matthew},
   year={2023},
   month=aug, pages={127–141} }


@article{amy2018towards,   
    title={Towards Large-scale Functional Verification of Universal Quantum Circuits},
   volume={287},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.287.1},
   DOI={10.4204/eptcs.287.1},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Amy, Matthew},
   year={2019},
   month=jan, pages={1–21} }


@article{kissinger2019pyzx,
   title={PyZX: Large Scale Automated Diagrammatic Reasoning},
   volume={318},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.318.14},
   DOI={10.4204/eptcs.318.14},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Kissinger, Aleks and van de Wetering, John},
   year={2020},
   month=may, pages={229–241} }


@misc{vandewetering2020zx,
      title={ZX-calculus for the working quantum computer scientist}, 
      author={John van de Wetering},
      year={2020},
      eprint={2012.13966},
      archivePrefix={arXiv},
      primaryClass={quant-ph},
      url={https://arxiv.org/abs/2012.13966}, 
}

@INPROCEEDINGS{Poor2023,
  author={Poór, Boldizsár and Wang, Quanlong and Shaikh, Razin A. and Yeh, Lia and Yeung, Richie and Coecke, Bob},
  booktitle={2023 38th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)}, 
  title={Completeness for arbitrary finite dimensions of ZXW-calculus, a unifying calculus}, 
  year={2023},
  volume={},
  number={},
  pages={1-14},
  keywords={Industries;Qubit;Quantum mechanics;Machine learning;Calculus;Hilbert space;Quantum circuit;ZXW-calculus;ZX-calculus;ZW-calculus;completeness;universal completeness;qudit;higher-dimension},
  doi={10.1109/LICS56636.2023.10175672}}

@inproceedings{DBLP:conf/lics/ZhouBHYY21,
  author       = {Li Zhou and
                  Gilles Barthe and
                  Justin Hsu and
                  Mingsheng Ying and
                  Nengkun Yu},
  title        = {A Quantum Interpretation of Bunched Logic {\&} Quantum Separation
                  Logic},
  booktitle    = {36th Annual {ACM/IEEE} Symposium on Logic in Computer Science, {LICS}
                  2021, Rome, Italy, June 29 - July 2, 2021},
  pages        = {1--14},
  publisher    = {{IEEE}},
  year         = {2021},
  url          = {https://doi.org/10.1109/LICS52264.2021.9470673},
  doi          = {10.1109/LICS52264.2021.9470673},
  timestamp    = {Sun, 19 Jan 2025 13:30:28 +0100},
  biburl       = {https://dblp.org/rec/conf/lics/ZhouBHYY21.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{diracdec,
author = {Xu, Yingte and Barthe, Gilles and Zhou, Li},
title = {Automating Equational Proofs in Dirac Notation},
year = {2025},
issue_date = {January 2025},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {9},
number = {POPL},
url = {https://doi.org/10.1145/3704878},
doi = {10.1145/3704878},
abstract = {Dirac notation is widely used in quantum physics and quantum programming languages to define, compute and reason about quantum states. This paper considers Dirac notation from the perspective of automated reasoning. We prove two main results: first, the first-order theory of Dirac notation is decidable, by a reduction to the theory of real closed fields and Tarski's theorem. Then, we prove that validity of equations can be decided efficiently, using term-rewriting techniques. We implement our equivalence checking algorithm in Mathematica, and showcase its efficiency across more than 100 examples from the literature.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {42},
numpages = {33},
keywords = {Dirac notation, automated verification, term rewriting}
}

@inproceedings{dirac1939new,
  title={A new notation for quantum mechanics},
  author={Dirac, Paul Adrien Maurice},
  booktitle={Mathematical proceedings of the Cambridge philosophical society},
  volume={35},
  number={3},
  pages={416--418},
  year={1939},
  DOI={10.1017/S0305004100021162},
  organization={Cambridge University Press}
}

@article{deBruijn1972lambda,
title = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem},
journal = {Indagationes Mathematicae (Proceedings)},
volume = {75},
number = {5},
pages = {381-392},
year = {1972},
issn = {1385-7258},
doi = {https://doi.org/10.1016/1385-7258(72)90034-0},
url = {https://www.sciencedirect.com/science/article/pii/1385725872900340},
author = {N.G {de Bruijn}},
abstract = {In ordinary lambda calculus the occurrences of a bound variable are made recognizable by the use of one and the same (otherwise irrelevant) name at all occurrences. This convention is known to cause considerable trouble in cases of substitution. In the present paper a different notational system is developed, where occurrences of variables are indicated by integers giving the “distance” to the binding λ instead of a name attached to that λ. The system is claimed to be efficient for automatic formula manipulation as well as for metalingual discussion. As an example the most essential part of a proof of the Church-Rosser theorem is presented in this namefree calculus.}
}



@article{Lewis2023,
   abstract = {Over the past 27 years, quantum computing has seen a huge rise in interest from both academia and industry. At the current rate, quantum computers are growing in size rapidly backed up by the increase of research in the field. Significant efforts are being made to improve the reliability of quantum hardware and to develop suitable software to program quantum computers.In contrast, the verification of quantum programs has received relatively less attention. Verifying programs is especially important in the quantum setting due to how difficult it is to program complex algorithms correctly on resource-constrained and error-prone quantum hardware. Research into creating verification frameworks for quantum programs has seen recent development, with a variety of tools implemented using a collection of theoretical ideas.This survey aims to be a short introduction into the area of formal verification of quantum programs, bringing together theory and tools developed to date. Further, this survey examines some of the challenges that the field may face in the future, namely the development of complex quantum algorithms.},
   author = {Marco Lewis and Sadegh Soudjani and Paolo Zuliani},
   doi = {10.1145/3624483},
   issn = {26436817},
   issue = {1},
   journal = {ACM Transactions on Quantum Computing},
   keywords = {Additional Key Words and PhrasesQuantum programming,formal verification,theorem provers},
   month = {12},
   publisher = {Association for Computing Machinery},
   title = {Formal Verification of Quantum Programs: Theory, Tools, and Challenges},
   volume = {5},
   year = {2023},
}

@article{PALSBERG2024206,
title = {Optimal implementation of quantum gates with two controls},
journal = {Linear Algebra and its Applications},
volume = {694},
pages = {206-261},
year = {2024},
issn = {0024-3795},
doi = {https://doi.org/10.1016/j.laa.2024.03.039},
url = {https://www.sciencedirect.com/science/article/pii/S0024379524001356},
author = {Jens Palsberg and Nengkun Yu},
keywords = {Quantum computing, Unitary matrices, Optimality},
abstract = {We give a detailed proof of a well-known theorem in quantum computing. The theorem characterizes the number of two-qubit gates that is necessary for implementing three-qubit quantum gates with two controls. For example, the theorem implies that five 2-qubit gates are necessary for implementing the Toffoli gate. No detailed proof was available earlier.}
}

@InProceedings{AutoQ2023,
author="Chen, Yu-Fang
and Chung, Kai-Min
and Leng{\'a}l, Ond{\v{r}}ej
and Lin, Jyun-Ao
and Tsai, Wei-Lun",
editor="Enea, Constantin
and Lal, Akash",
title="AutoQ: An Automata-Based Quantum Circuit Verifier",
booktitle="Computer Aided Verification",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="139--153",
abstract="We present a specification language and a fully automated tool named AutoQ for verifying quantum circuits symbolically. The tool implements the automata-based algorithm from [14] and extends it with the capabilities for symbolic reasoning. The extension allows to specify relational properties, i.e., relationships between states before and after executing a circuit. We present a number of use cases where we used AutoQ to fully automatically verify crucial properties of several quantum circuits, which have, to the best of our knowledge, so far been proved only with human help.",
isbn="978-3-031-37709-9"
}

@article{AutoQ_popl_2023,
author = {Chen, Yu-Fang and Chung, Kai-Min and Leng\'{a}l, Ond\v{r}ej and Lin, Jyun-Ao and Tsai, Wei-Lun and Yen, Di-De},
title = {An Automata-Based Framework for Verification and Bug Hunting in Quantum Circuits},
year = {2023},
issue_date = {June 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {PLDI},
url = {https://doi.org/10.1145/3591270},
doi = {10.1145/3591270},
abstract = {We introduce a new paradigm for analysing and finding bugs in quantum circuits. In our approach, the problem is given by a ‍triple {P} C {Q} and the question is whether, given a set P of quantum states on the input of a circuit C, the set of quantum states on the output is equal to (or included in) a set Q. While this is not suitable to specify, e.g., functional correctness of a quantum circuit, it is sufficient to detect many bugs in quantum circuits. We propose a technique based on tree automata to compactly represent sets of quantum states and develop transformers to implement the semantics of quantum gates over this representation. Our technique computes with an algebraic representation of quantum states, avoiding the inaccuracy of working with floating-point numbers. We implemented the proposed approach in a prototype tool and evaluated its performance against various benchmarks from the literature. The evaluation shows that our approach is quite scalable, e.g., we managed to verify a large circuit with 40 qubits and 141,527 gates, or catch bugs injected into a circuit with 320 qubits and 1,758 gates, where all tools we compared with failed. In addition, our work establishes a connection between quantum program verification and automata, opening new possibilities to exploit the richness of automata theory and automata-based verification in the world of quantum computing.},
journal = {Proc. ACM Program. Lang.},
month = jun,
articleno = {156},
numpages = {26},
keywords = {verification, tree automata, quantum circuits}
}

@article{AutoQ_popl2025,
author = {Abdulla, Parosh Aziz and Chen, Yo-Ga and Chen, Yu-Fang and Hol\'{\i}k, Luk\'{a}\v{s} and Leng\'{a}l, Ond\v{r}ej and Lin, Jyun-Ao and Lo, Fang-Yi and Tsai, Wei-Lun},
title = {Verifying Quantum Circuits with Level-Synchronized Tree Automata},
year = {2025},
issue_date = {January 2025},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {9},
number = {POPL},
url = {https://doi.org/10.1145/3704868},
doi = {10.1145/3704868},
abstract = {We present a new method for the verification of quantum circuits based on a novel symbolic representation of sets of quantum states using level-synchronized tree automata (LSTAs). LSTAs extend classical tree automata by labeling each transition with a set of choices, which are then used to synchronize subtrees of an accepted tree. Compared to the traditional tree automata, LSTAs have an incomparable expressive power while maintaining important properties, such as closure under union and intersection, and decidable language emptiness and inclusion. We have developed an efficient and fully automated symbolic verification algorithm for quantum circuits based on LSTAs. The complexity of supported gate operations is at most quadratic, dramatically improving the exponential worst-case complexity of an earlier tree automata-based approach. Furthermore, we show that LSTAs are a promising model for parameterized verification, i.e., verifying the correctness of families of circuits with the same structure for any number of qubits involved, which principally lies beyond the capabilities of previous automated approaches. We implemented this method as a C++ tool and compared it with three symbolic quantum circuit verifiers and two simulators on several benchmark examples. The results show that our approach can solve problems with sizes orders of magnitude larger than the state of the art.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {32},
numpages = {31},
keywords = {quantum circuits, tree automata, verification}
}
